[[!comment format=mdwn
 username="david"
 avatar="http://cdn.libravatar.org/avatar/22c2d800db6a7699139df604a67cb221"
 subject="getting closer"
 date="2018-08-25T17:16:48Z"
 content="""
maybe I suffer from Haskell blindness, but I didn't see how you handled keys

here's my latest revision
[[!format haskell \"\"\"
gitoliteKeys :: User -> [(FilePath, String)] -> Property UnixLike
gitoliteKeys user@(User username) keys = property' (\"set up gitolite keys for \" ++ username) $ \w -> do
      home <- liftIO (User.homedir user)
      ensureProperty w $ go home
  where
    go :: FilePath -> Property UnixLike
    go home = installKeys keys
                `onChange` recompile
                `requires` File.dirExists keydir
        where
          keydir = home </> \".gitolite/keydir/zzz/propellor\"
          recompile = Cmd.userScriptProperty user [ \"gitolite ../triggers/post-compile/ssh-authkeys\"
                                                  , \"gitolite ../triggers/post-compile/ssh-authkeys-shell-users bremner\"
                                                  ]
                      `changesFile` (home </> \"gitolite/.ssh/authorized_keys\")
          installKeys :: [(FilePath, String)] -> Property UnixLike
          installKeys [] = doNothing
          installKeys ((path, content):rest) = File.hasContent (keydir </> path ++ \".pub\") [content]
                                               `before` installKeys rest
\"\"\"]]

It still has one piece of hardcoding in it (the shell user bremner)
"""]]
